package nodatabase.test.domain;

public class Help {
	public String getEncryptionHelp() {
		String sHelp = new String();
		sHelp += "<h2>Encryption</h2>\r\n" + 
				"        Let's say we have a random string we want to encrypt:\r\n" + 
				"        \\begin{align*}\r\n" + 
				"        \\text{Daan Snoeken}\r\n" + 
				"        \\end{align*}\r\n" + 
				"        We can convert this into numbers according to the ASCII table and to make sure we always have 3 digits for each\r\n" + 
				"        character, we add 101 to the value of each character. However, we may also pick larger numbers to add. Next we\r\n" + 
				"        concatenate all the numbers we get in order. This will give us the following number:\r\n" + 
				"\r\n" + 
				"        \\begin{align}\r\n" + 
				"        a_0=169198198211133184211212202208202211.\r\n" + 
				"        \\label{def:a0}\r\n" + 
				"        \\end{align}\r\n" + 
				"\r\n" + 
				"        Now consider the following first degree polynomial,\r\n" + 
				"        \r\n" + 
				"        \\begin{align}\r\n" + 
				"        y=a_0+a_1x\r\n" + 
				"        \\label{eqn:linear}\r\n" + 
				"        \\end{align}\r\n" + 
				"\r\n" + 
				"        and note that the value of $a_0$ is the same in eq. \\ref{eqn:linear} as in eq. \\ref{def:a0}. Next, pick a random\r\n" + 
				"        value for $a_1$ and find two points at e.g. $x=1$ and $x=2$ that lie on this line. These will be your encrypted\r\n" + 
				"        numbers. Only somebody who knows both numbers can figure out what the original number $a_0$ was that you started\r\n" + 
				"        with.\r\n" + 
				"        This can of course be extended to higher order equations, e.g.\r\n" + 
				"\r\n" + 
				"        \\begin{align}\r\n" + 
				"        y=a_0+a_1x+a_2x^2+...+a_n x^n.\r\n" + 
				"        \\label{eqn:ordern}\r\n" + 
				"        \\end{align}\r\n" + 
				"\r\n" + 
				"        Note that for a polynomial of degree $n$, we need (at least) $n+1$ points to describe it. In all cases, $a_0$\r\n" + 
				"        needs to be the original number (eq. \\ref{def:a0}) and all the others can be picked at random. As was done with\r\n" + 
				"        the linear equation, pick random x values for every point and solve equation \\ref{eqn:ordern} for each x value\r\n" + 
				"        and save the output. Now you can store every number on a separate location and only when someone has all the\r\n" + 
				"        numbers, will they be able to solve the original message. So, if you and your friend have a secret, you can do\r\n" + 
				"        this and give one number to your friend. Then keep one number yourself. Now neither of you can decrypt the\r\n" + 
				"        message on your own, but you can solve it when you are together.\r\n" + 
				"        <h2>Decryption</h2>\r\n" + 
				"        I will describe the specific case first and then a general case.\r\n" + 
				"        <h3>Specific case</h3>\r\n" + 
				"        In order to decrypt a certain message, remember that we have two points. Let's say the points $P_1$ and $P_2$\r\n" + 
				"        are defined by the following coordinates:\r\n" + 
				"        \\begin{align}\r\n" + 
				"        P_1 = (1,327014671430754977320910780497959109),\\nonumber\\\\\r\n" + 
				"        P_2 = (2,484831144650376770430609358787716007).\r\n" + 
				"        \\end{align}\r\n" + 
				"        Since there are only two points, our best guess is that the original was formed using a first degree polynomial\r\n" + 
				"        (eq. \\ref{eqn:linear}). So in order to get the value for $a_0$, we need to derive the value of $a_1$ from the\r\n" + 
				"        given points. This is defined by:\r\n" + 
				"        \\begin{align}\r\n" + 
				"        a_1=\\frac{\\Delta y}{\\Delta x} = \\frac{P_2^{(y)}-P_1^{(y)}}{P_2^{(x)}-P_1^{(x)}},\r\n" + 
				"        \\end{align}\r\n" + 
				"        where $P_n^{(y,x)}$ refers to the $y$ and $x$ coordinate of the $n$'th point, respectively. Then filling in all\r\n" + 
				"        the values gives\r\n" + 
				"        \\begin{align}\r\n" + 
				"        a_1 = 157816473219621793109698578289756898.\r\n" + 
				"        \\end{align}\r\n" + 
				"        Then $a_0$ will be\r\n" + 
				"        \\begin{align}\r\n" + 
				"        a_0 = P_1^{(y)}-a_1=169198198211133184211212202208202211.\r\n" + 
				"        \\end{align}\r\n" + 
				"        Note that each character will be represented by three digits and that the ASCII value can be generated by\r\n" + 
				"        subtracting 101. Doing this will get our original string back, which was\r\n" + 
				"        \\begin{align*}\r\n" + 
				"        \\text{Daan Snoeken}\r\n" + 
				"        \\end{align*}\r\n" + 
				"        \r\n" + 
				"        <h3>General case</h3>\r\n" + 
				"        Let's say we are given any number of points, defined by\r\n" + 
				"        \\begin{align}\r\n" + 
				"        \\{P_1=(x_1,y_1),P_2=(x_2,y_2),...,P_n=(x_n,y_n)\\}.\r\n" + 
				"        \\label{eq:points}\r\n" + 
				"        \\end{align}\r\n" + 
				"        These points define the $n$'th degree polynomial, defined by\r\n" + 
				"        \\begin{align}\r\n" + 
				"        y(x)=a_0+a_1x+a_2x^2+...+a_nx^n.\r\n" + 
				"        \\label{eq:generalpolynomial}\r\n" + 
				"        \\end{align}\r\n" + 
				"        In order to decrypt the message, $a_0$ must be found. Combining eqs. \\ref{eq:points} and\r\n" + 
				"        \\ref{eq:generalpolynomial} gives a system of equations with $n$ unknowns and $n$ equations defined by\r\n" + 
				"        \\begin{align}\r\n" + 
				"        &y_1=a_0+a_1x_1+a_2x_1^2+...+a_nx_1^n\\nonumber\\\\\r\n" + 
				"        &y_2=a_0+a_1x_2+a_2x_2^2+...+a_nx_2^n\\nonumber\\\\\r\n" + 
				"        &\\vdots\\nonumber\\\\\r\n" + 
				"        &y_n=a_0+a_1x_n+a_2x_n^2+...+a_nx_n^n.\r\n" + 
				"        \\label{eq:system}\r\n" + 
				"        \\end{align}\r\n" + 
				"        Note that all the values for $x_n$ and $y_n$ are known from the points defined in eq. \\ref{eq:points}. Now solve\r\n" + 
				"        the system of equations shown in equation \\ref{eq:system}. This should give a value for $a_0$ that gives the\r\n" + 
				"        numerical representation of the original string. Once again, this number should be split into three digits for\r\n" + 
				"        each character and can then be converted by subtracting 101 and using the ASCII table.";
		return sHelp;
	}
}
